(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class GameObject {
    constructor(x, y, w, h, color, ctx) {
        this.speed = 1;
        this.freeWill = false;
        this.hp = 1;
        this.x = x;
        this.y = y;
        this.originalY = this.y;
        this.width = w;
        this.height = h;
        this.context = ctx;
        this.color = color;
        this.update();
    }
    update() {
        this.context.fillStyle = this.color;
        this.context.fillRect(this.x, this.y, this.width, this.height);
    }
    setSpeed(speed) {
        this.speed = speed;
        return this;
    }
    addFreeWill() {
        this.freeWill = true;
    }
    moveFront() {
        this.x += (this.speed * 10);
    }
    moveBack() {
        this.x -= (this.speed * 10);
    }
    jump() {
        let goingDown = false;
        const me = this;
        const limit = 150;
        clearInterval(me.jumping);
        this.jumping = setInterval(() => {
            if (me.y > limit && !goingDown) {
                me.y -= 3;
                console.log('jumping: ' + me.y);
            }
            else {
                goingDown = true;
                me.y += 3;
                if (me.y > me.originalY) {
                    clearInterval(me.jumping);
                    me.y = me.originalY;
                    goingDown = false;
                }
            }
        }, 10);
    }
}
exports.GameObject = GameObject;

},{}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const game_object_class_1 = require("./game-object.class");
class Game {
    constructor() {
        this.startGame();
    }
    startGame() {
        // Level to play
        this.level = 1;
        // Canvas setup
        this.canvas = document.getElementById('canvas');
        this.canvas.width = 800;
        this.canvas.height = 270;
        this.context = this.canvas.getContext('2d');
        document.body.insertBefore(this.canvas, document.body.childNodes[0]);
        // Function for canvas refreshing
        setInterval(() => this.updateGameArea(), 20);
        // Add elements: players, obstacles and enemies
        this.setLevelElements(this.level);
        this.addEvents();
    }
    setLevelElements(level) {
        // General elements
        this.floor = new game_object_class_1.GameObject(0, 250, 800, 20, '#667292', this.context);
        switch (level) {
            case 1:
                // Add elements: players, obstacles and enemies
                this.player = new game_object_class_1.GameObject(20, 210, 10, 40, '#907d61', this.context).setSpeed(1.5);
                this.obstacles = [
                    new game_object_class_1.GameObject(120, 230, 20, 20, '#8d9db6', this.context).setSpeed(0),
                    new game_object_class_1.GameObject(280, 230, 20, 20, '#8d9db6', this.context).setSpeed(0),
                ];
                this.enemies = [
                    new game_object_class_1.GameObject(150, 210, 10, 40, '#c83349', this.context).setSpeed(1.2),
                    new game_object_class_1.GameObject(240, 210, 10, 40, '#c83349', this.context).setSpeed(1.2),
                    new game_object_class_1.GameObject(480, 210, 10, 40, '#c83349', this.context).setSpeed(.8),
                ];
                break;
        }
    }
    clear() {
        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
    }
    updateGameArea() {
        this.clear();
        this.player.update();
        this.obstacles[0].update();
        this.obstacles[1].update();
        this.enemies[0].update();
        this.enemies[1].update();
        this.enemies[2].update();
        this.floor.update();
    }
    addEvents() {
        window.addEventListener('keydown', (e) => this.checkKey(e), false);
    }
    checkKey(e) {
        const code = e.keyCode;
        switch (code) {
            case 37:
                this.player.moveBack();
                console.log('Left');
                break; // Left key
            case 38:
                this.player.jump();
                console.log('Up');
                break; // Up key
            case 39:
                this.player.moveFront();
                console.log('Right');
                break; // Right key
            case 40:
                console.log('Down');
                break; // Down key
            default: console.log(code); // Everything else
        }
    }
}
const game = new Game();
// game.startGame();

},{"./game-object.class":1}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
